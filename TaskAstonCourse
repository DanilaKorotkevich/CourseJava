public class Main {
    public static void main(String[] args) {
        
    }
}
----------------------------------------------------------
public class TestingClass {

    int a;
    int b;

    public long calcFactorial(long n) {
        if (n < 0) throw new IllegalArgumentException("Число не может быть отрицательным!");
        return (n <= 1) ? 1 : n * calcFactorial(n - 1);
    }

    public int calcSquare(int a, int h) {
        if (a != 0 || h != 0) {
            if ((a * h) % 2 != 0) {
                throw new IllegalArgumentException("Результат не может быть с остатком!");
            } else {
                return (a * h) / 2;
            }
        } else {
            System.out.println("Невалидные значения!");
        }
        return 0;
    }

    public int calculation(int a, int b, String operation) {
        if (operation == "+" | operation == "-" | operation == "*" | operation == "/") {
            switch (operation) {
                case "+": return a + b;
                case "-": return a - b;
                case "*": return a * b;
                case "/": if (b == 0) {
                    System.out.println("деление на ноль невозможно!");
                    return 0;
                } else if (a % b != 0) {
                    System.out.println("Деление c остатком невозможно!");
                    return 0;
                } else {
                    return a / b;
                }
            }
        } else {
            System.err.println("Неверный ввод оператора!");
            return 0;
        }
        return 0;
    }

    public int equalsNums(int a, int b) {
        if (a == b) {
            return 0;
        }
        if (a < b) {
            return -1;
        }
        return 1;
    }
}
-----------------------------------------------------------------
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class TestingClassJUnitTest {
    private TestingClass testingClass;

    @BeforeEach
    public void setUp() {
        testingClass = new TestingClass();
    }

    @Test
    @DisplayName("Тест calcFactorial")
    public void testFactorial() {
        assertEquals(1L, testingClass.calcFactorial(0));
        assertEquals(1L, testingClass.calcFactorial(1));
        assertEquals(120L, testingClass.calcFactorial(5));
        assertEquals(3628800L, testingClass.calcFactorial(10));
        assertEquals(2432902008176640000L, testingClass.calcFactorial(20));
    }

    @Test
    @DisplayName("Тест calcSquare")
    public void testCalcSquare() {
        //тест невалидных значений
        assertEquals(0, testingClass.calcSquare(0, 5));
        assertEquals(0, testingClass.calcSquare(10, 0));
        //тест валидных значений
        assertEquals(25, testingClass.calcSquare(5, 10));
        assertEquals(60, testingClass.calcSquare(15, 8));
    }

    @Test
    @DisplayName("Тест calculation")
    public void testCalculation() {
        assertEquals(25, testingClass.calculation(10, 15, "+"));
        assertEquals(0, testingClass.calculation(-5, 5, "+"));

        assertEquals(-5, testingClass.calculation(10, 15, "-"));
        assertEquals(30, testingClass.calculation(56, 26, "-"));
        assertEquals(26, testingClass.calculation(-7, -33, "-"));
        assertEquals(24, testingClass.calculation(7, -17, "-"));

        assertEquals(0, testingClass.calculation(5, 0, "*"));
        assertEquals(40, testingClass.calculation(5, 8, "*"));
        assertEquals(-6, testingClass.calculation(3, -2, "*"));
        assertEquals(6, testingClass.calculation(-3, -2, "*"));

        assertEquals(2, testingClass.calculation(4, 2, "/"));
        assertEquals(0, testingClass.calculation(7, 3, "/"));
        assertEquals(0, testingClass.calculation(8, 5, "/"));
        assertEquals(0, testingClass.calculation(5, 0, "/"));
        assertEquals(0, testingClass.calculation(2, 10, "/"));
        assertEquals(-2, testingClass.calculation(-10, 5, "/"));
        assertEquals(-5, testingClass.calculation(50, -10, "/"));
    }

    @Test
    @DisplayName("Тест equalsNums")
    public void testEqualsNums() {
        assertEquals(-1, testingClass.equalsNums(5, 6));
        assertEquals(0, testingClass.equalsNums(2, 2));
        assertEquals(1, testingClass.equalsNums(7, 3));
        assertEquals(0, testingClass.equalsNums(0, 0));
        assertEquals(1, testingClass.equalsNums(14, 0));
        assertEquals(-1, testingClass.equalsNums(0, 1));
    }
}
-------------------------------------------------------------------------
import org.example.Task6.TestingClass;
import org.junit.jupiter.api.DisplayName;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import static org.testng.Assert.*;

public class TestingClasTestNGTest {

    private TestingClass testingClass;
    @BeforeMethod
    public void setUp() {
        testingClass = new TestingClass();
    }
    @Test
    @DisplayName("Тест calcFactorial")
    public void testCalcFactorial() {
        assertEquals(testingClass.calcFactorial(0), 1L);
        assertEquals(testingClass.calcFactorial(1), 1L);
    }

    @Test
    public void testCalcFactorialOfPositiveNumber() {
        assertEquals(testingClass.calcFactorial(5), 120L);
        assertEquals(testingClass.calcFactorial(10), 3628800L);
        assertEquals(testingClass.calcFactorial(20), 2432902008176640000L);
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testCalcFactorialOfNegativeNumber() {
        testingClass.calcFactorial(-1);
    }

    @Test
    @DisplayName("Тест calcSquare")
    public void testCalcSquare() {
        assertEquals(testingClass.calcSquare(2, 1), 1);
    }

    @Test
    public void testCalcSquareOfPositiveNumbers() {
        assertEquals(testingClass.calcSquare(5, 2), 5);
        assertEquals(testingClass.calcSquare(7, 4), 14);
        assertEquals(testingClass.calcSquare(5, 6), 15);
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testCalcSquareOfNegativeNumbers() {
        testingClass.calcSquare(5, 5);
        testingClass.calcSquare(1, 1);
    }

    @Test
    @DisplayName("Тест calculation")
    public void testCalculatoin() {
        assertEquals(testingClass.calculation(0, 0, "+"), 0);
        assertEquals(testingClass.calculation(0, 0, "-"), 0);
        assertEquals(testingClass.calculation(0, 0, "*"), 0);
        assertEquals(testingClass.calculation(0, 1, "/"), 0);
    }

    @Test
    public void testCalculationOfPositiveNumbers() {
        assertEquals(testingClass.calculation(2, 2, "+"), 4);
        assertEquals(testingClass.calculation(8, 3, "-"), 5);
        assertEquals(testingClass.calculation(5, 9, "*"), 45);
        assertEquals(testingClass.calculation(8, 4, "/"), 2);
    }

    @Test
    public void testCalculationOfNegativeNumbers() {
        assertEquals(testingClass.calculation(2, 4, "%"), 0);
        assertEquals(testingClass.calculation(2, 0, "/"), 0);
        assertEquals(testingClass.calculation(8, 3, "/"), 0);
    }

    @Test
    @DisplayName("Тест equalsNums")
    public void testEqualsNums() {
        assertEquals(testingClass.equalsNums(0, 0), 0);
        assertEquals(testingClass.equalsNums(1, 0), 1);
        assertEquals(testingClass.equalsNums(0, 1), -1);
    }

    @Test
    public void testEqualsNumsOfPositiveNumbers() {
        assertEquals(testingClass.equalsNums(5, 5), 0);
        assertEquals(testingClass.equalsNums(50, 29), 1);
        assertEquals(testingClass.equalsNums(83, 109), -1);
    }
}


